import sys
import os
import datetime
import regex as re
from pathlib import Path
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox, QMenu
from PyQt6.QtGui import QContextMenuEvent
from concurrent.futures import ThreadPoolExecutor

# ËΩâÁÇ∫exe ‰ΩøÁî®ÁµïÂ∞çË∑ØÂæë Ëß£Êûêimg‰ΩçÁΩÆ
def get_resource_path(relative_path):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(520, 320)
        Form.setMinimumSize(QtCore.QSize(520, 320))
        Form.setMaximumSize(QtCore.QSize(520, 320))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(get_resource_path('img/LOGO.ico')), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Form.setWindowIcon(icon)
        Form.setStyleSheet("background-color: #2e3440; color: #eceff4; font-family: 'Microsoft JhengHei UI'; font-size: 12pt;")

        # ÂàóË°®ÈÅ∏ÂñÆÊ®£Âºè
        self.listWidget = QtWidgets.QListWidget(parent=Form)
        self.listWidget.setGeometry(QtCore.QRect(10, 20, 500, 200))
        self.listWidget.setObjectName("listWidget")
        self.listWidget.setStyleSheet("QScrollBar:vertical { border: none; background-color: #4c566a; width: 12px; margin: 0; } QScrollBar::handle:vertical { background-color: #88c0d0; min-height: 20px; border-radius: 5px; } QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { border: none; background: none; height: 0; } QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical { background: none; } QScrollBar:horizontal { border: none; background-color: #4c566a; height: 12px; margin: 0; } QScrollBar::handle:horizontal { background-color: #88c0d0; min-width: 20px; border-radius: 5px; } QScrollBar::add-line:horizontal, QScrollBar::sub-line:horizontal { border: none; background: none; width: 0; } QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal { background: none; }")

        # ÈÄ≤Â∫¶Ê¢ùÊ®£Âºè
        self.progressBar = QtWidgets.QProgressBar(parent=Form)
        self.progressBar.setGeometry(QtCore.QRect(10, 230, 500, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.progressBar.setTextVisible(True)
        self.progressBar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setStyleSheet(
            "QProgressBar { border: 2px solid #4c566a; border-radius: 5px; text-align: center; }"
            "QProgressBar::chunk { background-color: #88c0d0; width: 20px; }")

        # ÊåâÈàïÊ®£Âºè
        button_style = ("QPushButton { background-color: #3b4252; border-radius: 8px; color: #eceff4; font-size: 16pt; }"
                        "QPushButton:hover { background-color: #5e81ac; }")

        self.pushButton = QtWidgets.QPushButton(parent=Form)
        self.pushButton.setGeometry(QtCore.QRect(10, 265, 70, 41))
        self.pushButton.setFont(QtGui.QFont("Microsoft JhengHei UI", 16))
        self.pushButton.setStyleSheet(button_style)
        self.pushButton.setText("üìÅ")
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_2.setGeometry(QtCore.QRect(100, 265, 70, 41))
        self.pushButton_2.setFont(QtGui.QFont("Microsoft JhengHei UI", 16))
        self.pushButton_2.setStyleSheet(button_style)
        self.pushButton_2.setText("‚ùå")
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_3.setGeometry(QtCore.QRect(190, 265, 320, 41))
        self.pushButton_3.setFont(QtGui.QFont("Segoe UI", 10, QtGui.QFont.Weight.Bold))
        self.pushButton_3.setStyleSheet(button_style)
        self.pushButton_3.setText("Âü∑  Ë°å")
        self.pushButton_3.setObjectName("pushButton_3")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        Form.setWindowTitle("Remove Annotation")


class FileProcessor(QtCore.QObject):
    progressUpdated = QtCore.pyqtSignal(int)
    processingFinished = QtCore.pyqtSignal(int, int, str)  # ÊàêÂäü, Â§±Êïó, log

    def __init__(self):
        super().__init__()

    def remove_comments(self, content, pattern):
        return re.sub(pattern, '', content)

    def remove_blank_lines(self, content):
        return re.sub(r'^\s*\n', '', content, flags=re.MULTILINE)

    def process_file(self, file_path, log_file):
        try:
            file_extension = os.path.splitext(file_path)[1]
            if file_extension == '.py':
                comment_pattern = re.compile(r'\/\*[\s\S]*?\*\/|(?<!http:|https:)\/\/[^\n]*(?![\s\S]*http:|[\s\S]*https:)|<!--[\s\S]*?-->|(?<!http:|https:)\/\/[^\n]*|\#.*')
            else:
                comment_pattern = re.compile(r'\/\*[\s\S]*?\*\/|(?<!http:|https:)\/\/[^\n]*(?![\s\S]*http:|[\s\S]*https:)|<!--[\s\S]*?-->|(?<!http:|https:)\/\/[^\n]*')

            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()

            content = self.remove_comments(content, comment_pattern)
            cleaned_content = self.remove_blank_lines(content)

            new_file_path = os.path.splitext(file_path)[0] + '_min' + os.path.splitext(file_path)[1]
            with open(new_file_path, 'w', encoding='utf-8') as file:
                file.write(cleaned_content)

            return True
        except Exception as e:
            # Á¥ÄÈåÑÁï∂ÂâçÊó•ÊúüÂíåÊôÇÈñì
            current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Â¶ÇÊûúËôïÁêÜÂ§±ÊïóÔºåË®òÈåÑÂà∞Êó•Ë™åÊñá‰ª∂
            with open(log_file, 'a', encoding='utf-8') as log:
                log.write(f"[{current_time}]\nÊ™îÊ°à: {file_path}\nÈåØË™§: {str(e)}\n\n")
            return False

    def process_files(self, file_paths):
        success_count = 0
        fail_count = 0
        log_file = "Error_Log.txt"

        # Ê™¢Êü•ÊòØÂê¶ÊúâÈÅ∏ÊìáÊ™îÊ°à
        if file_paths:

            for i, file_path in enumerate(file_paths):
                if self.process_file(file_path, log_file):
                    success_count += 1
                else:
                    fail_count += 1

                progress = int((i + 1) / len(file_paths) * 100)
                self.progressUpdated.emit(progress)

        self.processingFinished.emit(success_count, fail_count, log_file)


class MainWindow(QtWidgets.QWidget, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.pushButton.clicked.connect(self.open_files)
        self.pushButton_2.clicked.connect(self.remove_selected_files)
        self.pushButton_3.clicked.connect(self.process_files)
        self.listWidget.setAcceptDrops(True)
        self.listWidget.setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode.DropOnly)

        self.listWidget.installEventFilter(self)  # ÂïüÁî®‰∫ã‰ª∂ÈÅéÊøæÂô®

        self.file_processor = FileProcessor()
        self.file_processor.progressUpdated.connect(self.update_progress_bar)
        self.file_processor.processingFinished.connect(self.show_summary)

        # Êñá‰ª∂ËôïÁêÜÁ∑öÁ®ã
        self.thread_pool = ThreadPoolExecutor()

        # Âè≥ÈçµËèúÂñÆ
        self.context_menu = QMenu(self)
        self.context_menu.addAction("ÈñãÂïüË≥áÊñôÂ§æ", self.open_folder)
        self.context_menu.addAction("Âà™Èô§ÈÅ∏Êìá", self.remove_selected_files)
        self.context_menu.addAction("Ê∏ÖÁ©∫ÂÖ®ÈÉ®", self.clear_all_files)
        self.context_menu.setStyleSheet(
            "QMenu { background-color: #3b4252; border: 1px solid #4c566a; }"
            "QMenu::item { padding: 5px 20px; }"
            "QMenu::item:selected { background-color: #5e81ac; }"
        )

    # ÈçµÁõ§Ëß∏ÁôºÂà™Èô§
    def keyPressEvent(self, event: QtGui.QKeyEvent):
        if event.key() == QtCore.Qt.Key.Key_Delete:
            self.remove_selected_files()
        super().keyPressEvent(event)

    # Ë¶ÜËìã‰∫ã‰ª∂ÈÅéÊøæÂô®ÂáΩÊï∏
    def eventFilter(self, source, event):
        if source == self.listWidget:
            if event.type() == QtCore.QEvent.Type.DragEnter:
                if event.mimeData().hasUrls():
                    event.acceptProposedAction()
                    return True
            elif event.type() == QtCore.QEvent.Type.Drop:
                for url in event.mimeData().urls():
                    file_path = url.toLocalFile()
                    if not self.is_duplicate(file_path):
                        self.listWidget.addItem(file_path)
                return True
        return super().eventFilter(source, event)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()

    def dropEvent(self, event):
        for url in event.mimeData().urls():
            file_path = url.toLocalFile()
            if not self.is_duplicate(file_path):
                self.listWidget.addItem(file_path)

    def open_files(self):
        file_paths, _ = QtWidgets.QFileDialog.getOpenFileNames(self, "ÈÅ∏ÊìáÊñá‰ª∂", "", "ÊâÄÊúâÊñá‰ª∂ (*)")
        for file_path in file_paths:
            if not self.is_duplicate(file_path):
                self.listWidget.addItem(file_path)

    def is_duplicate(self, file_path):
        for i in range(self.listWidget.count()):
            if self.listWidget.item(i).text() == file_path:
                return True
        return False

    def remove_selected_files(self):
        selected_items = self.listWidget.selectedItems()
        for item in selected_items:
            self.listWidget.takeItem(self.listWidget.row(item))

    def clear_all_files(self):
        self.listWidget.clear()

    def contextMenuEvent(self, event: QContextMenuEvent):
        self.context_menu.exec(event.globalPos())

    def update_progress_bar(self, value):
        self.progressBar.setValue(value)

    def show_summary(self, success_count, fail_count, log_file):
        self.progressBar.setValue(100)
        if fail_count > 0:
            message = f"ÂÆåÊàê: {success_count} ÂÄãÔºåÂ§±Êïó: {fail_count} ÂÄã\nÂ§±ÊïóÁöÑÊ™îÊ°àÂ∑≤Ë®òÈåÑÂú® {log_file}"
        else:
            message = f"ÂÆåÊàê: {success_count} ÂÄãÔºåÂ§±Êïó: {fail_count} ÂÄã"
        QMessageBox.information(self, "ËôïÁêÜÁµêÊûú", message)

    def process_files(self):
        if self.listWidget.count() == 0:
            QMessageBox.warning(self, "Ë≠¶Âëä", "Ë´ãÈÅ∏ÊìáËá≥Â∞ë‰∏ÄÂÄãÊñá‰ª∂ÈÄ≤Ë°åËôïÁêÜ")
            return

        file_paths = [self.listWidget.item(i).text() for i in range(self.listWidget.count())]
        self.progressBar.setValue(0)

        # ÂñÆÁ∑öÁ®ãËôïË£°
        self.thread_pool.submit(self.file_processor.process_files, file_paths)

    def open_folder(self):
        selected_items = self.listWidget.selectedItems()
        if selected_items:
            for item in selected_items:
                file_path = item.text()
                folder_path = os.path.dirname(file_path)
                folder_path = Path(folder_path)  # ‰ΩøÁî® pathlib ËôïÁêÜË∑ØÂæë

                if not folder_path.exists() or not folder_path.is_dir():
                    QMessageBox.warning(self, "Ë≠¶Âëä", f"Ë≥áÊñôÂ§æ‰∏çÂ≠òÂú®: {folder_path}")
                    continue

                try:
                    os.startfile(str(folder_path))
                except Exception as e:
                    # È°ØÁ§∫ÂÖ∂‰ªñÈåØË™§Ë®äÊÅØ
                    QMessageBox.critical(self, "ÈåØË™§", f"ÁôºÁîüÈåØË™§:\n{e}")


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = MainWindow()
    mainWindow.show()
    sys.exit(app.exec())
